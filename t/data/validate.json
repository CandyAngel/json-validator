{
   "securityDefinitions" : {
      "api_key" : {
         "in" : "header",
         "name" : "api_key",
         "type" : "apiKey"
      },
      "petstore_auth" : {
         "authorizationUrl" : "http://petstore.swagger.io/api/oauth/dialog",
         "scopes" : {
            "write:pets" : "modify pets in your account",
            "read:pets" : "read your pets"
         },
         "type" : "oauth2",
         "flow" : "implicit"
      }
   },
   "swagger" : "2.0",
   "definitions" : {
      "Pet" : {
         "type" : "object",
         "required" : [
            "name",
            "photoUrls"
         ],
         "xml" : {
            "name" : "Pet"
         },
         "properties" : {
            "photoUrls" : {
               "xml" : {
                  "wrapped" : true,
                  "name" : "photoUrl"
               },
               "type" : "array",
               "items" : {
                  "type" : "string"
               }
            },
            "name" : {
               "example" : "doggie",
               "type" : "string"
            },
            "id" : {
               "format" : "int64",
               "type" : "integer"
            },
            "status" : {
               "type" : "string",
               "description" : "pet status in the store",
               "enum" : [
                  "available",
                  "pending",
                  "sold"
               ]
            },
            "tags" : {
               "items" : {
                  "$ref" : "#/definitions/Tag"
               },
               "type" : "array",
               "xml" : {
                  "wrapped" : true,
                  "name" : "tag"
               }
            },
            "category" : {
               "$ref" : "#/definitions/Category"
            }
         }
      },
      "Order" : {
         "type" : "object",
         "properties" : {
            "shipDate" : {
               "type" : "string",
               "format" : "date-time"
            },
            "petId" : {
               "type" : "integer",
               "format" : "int64"
            },
            "id" : {
               "format" : "int64",
               "type" : "integer"
            },
            "complete" : {
               "type" : "boolean",
               "default" : false
            },
            "status" : {
               "enum" : [
                  "placed",
                  "approved",
                  "delivered"
               ],
               "description" : "Order Status",
               "type" : "string"
            },
            "quantity" : {
               "type" : "integer",
               "format" : "int32"
            }
         },
         "xml" : {
            "name" : "Order"
         }
      },
      "User" : {
         "properties" : {
            "userStatus" : {
               "format" : "int32",
               "description" : "User Status",
               "type" : "integer"
            },
            "email" : {
               "type" : "string"
            },
            "phone" : {
               "type" : "string"
            },
            "id" : {
               "type" : "integer",
               "format" : "int64"
            },
            "username" : {
               "type" : "string"
            },
            "lastName" : {
               "type" : "string"
            },
            "firstName" : {
               "type" : "string"
            },
            "password" : {
               "type" : "string"
            }
         },
         "xml" : {
            "name" : "User"
         },
         "type" : "object"
      },
      "ApiResponse" : {
         "type" : "object",
         "properties" : {
            "message" : {
               "type" : "string"
            },
            "type" : {
               "type" : "string"
            },
            "code" : {
               "type" : "integer",
               "format" : "int32"
            }
         }
      },
      "Tag" : {
         "type" : "object",
         "properties" : {
            "name" : {
               "type" : "string"
            },
            "id" : {
               "format" : "int64",
               "type" : "integer"
            }
         },
         "xml" : {
            "name" : "Tag"
         }
      },
      "Category" : {
         "type" : "object",
         "xml" : {
            "name" : "Category"
         },
         "properties" : {
            "name" : {
               "type" : "string"
            },
            "id" : {
               "type" : "integer",
               "format" : "int64"
            }
         }
      }
   },
   "externalDocs" : {
      "url" : "http://swagger.io",
      "description" : "Find out more about Swagger"
   },
   "schemes" : [
      "http"
   ],
   "basePath" : "/v2",
   "host" : "petstore.swagger.io",
   "paths" : {
      "/pet/{petId}/uploadImage" : {
         "post" : {
            "consumes" : [
               "multipart/form-data"
            ],
            "description" : "",
            "produces" : [
               "application/json"
            ],
            "tags" : [
               "pet"
            ],
            "security" : [
               {
                  "petstore_auth" : [
                     "write:pets",
                     "read:pets"
                  ]
               }
            ],
            "operationId" : "uploadFile",
            "summary" : "uploads an image",
            "parameters" : [
               {
                  "format" : "int64",
                  "in" : "path",
                  "required" : true,
                  "name" : "petId",
                  "description" : "ID of pet to update",
                  "type" : "integer"
               },
               {
                  "in" : "formData",
                  "type" : "string",
                  "description" : "Additional data to pass to server",
                  "name" : "additionalMetadata",
                  "required" : false
               },
               {
                  "in" : "formData",
                  "type" : "file",
                  "description" : "file to upload",
                  "name" : "file",
                  "required" : false
               }
            ],
            "responses" : {
               "200" : {
                  "description" : "successful operation",
                  "schema" : {
                     "$ref" : "#/definitions/ApiResponse"
                  }
               }
            }
         }
      },
      "/user" : {
         "post" : {
            "parameters" : [
               {
                  "in" : "body",
                  "required" : true,
                  "name" : "body",
                  "description" : "Created user object",
                  "schema" : {
                     "$ref" : "#/definitions/User"
                  }
               }
            ],
            "responses" : {
               "default" : {
                  "description" : "successful operation"
               }
            },
            "operationId" : "createUser",
            "summary" : "Create user",
            "tags" : [
               "user"
            ],
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "description" : "This can only be done by the logged in user."
         }
      },
      "/user/{username}" : {
         "get" : {
            "description" : "",
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "summary" : "Get user by user name",
            "operationId" : "getUserByName",
            "tags" : [
               "user"
            ],
            "responses" : {
               "404" : {
                  "description" : "User not found"
               },
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/User"
                  },
                  "description" : "successful operation"
               },
               "400" : {
                  "description" : "Invalid username supplied"
               }
            },
            "parameters" : [
               {
                  "name" : "username",
                  "required" : true,
                  "type" : "string",
                  "description" : "The name that needs to be fetched. Use user1 for testing. ",
                  "in" : "path"
               }
            ]
         },
         "delete" : {
            "description" : "This can only be done by the logged in user.",
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "summary" : "Delete user",
            "operationId" : "deleteUser",
            "tags" : [
               "user"
            ],
            "responses" : {
               "404" : {
                  "description" : "User not found"
               },
               "400" : {
                  "description" : "Invalid username supplied"
               }
            },
            "parameters" : [
               {
                  "in" : "path",
                  "name" : "username",
                  "required" : true,
                  "type" : "string",
                  "description" : "The name that needs to be deleted"
               }
            ]
         },
         "put" : {
            "description" : "This can only be done by the logged in user.",
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "operationId" : "updateUser",
            "summary" : "Updated user",
            "tags" : [
               "user"
            ],
            "parameters" : [
               {
                  "description" : "name that need to be deleted",
                  "type" : "string",
                  "required" : true,
                  "name" : "username",
                  "in" : "path"
               },
               {
                  "in" : "body",
                  "schema" : {
                     "$ref" : "#/definitions/User"
                  },
                  "description" : "Updated user object",
                  "required" : true,
                  "name" : "body"
               }
            ],
            "responses" : {
               "404" : {
                  "description" : "User not found"
               },
               "400" : {
                  "description" : "Invalid user supplied"
               }
            }
         }
      },
      "/user/logout" : {
         "get" : {
            "operationId" : "logoutUser",
            "summary" : "Logs out current logged in user session",
            "tags" : [
               "user"
            ],
            "parameters" : [],
            "responses" : {
               "default" : {
                  "description" : "successful operation"
               }
            },
            "description" : "",
            "produces" : [
               "application/xml",
               "application/json"
            ]
         }
      },
      "/user/createWithArray" : {
         "post" : {
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "description" : "",
            "parameters" : [
               {
                  "in" : "body",
                  "required" : true,
                  "name" : "body",
                  "description" : "List of user object",
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/User"
                     }
                  }
               }
            ],
            "responses" : {
               "default" : {
                  "description" : "successful operation"
               }
            },
            "operationId" : "createUsersWithArrayInput",
            "tags" : [
               "user"
            ],
            "summary" : "Creates list of users with given input array"
         }
      },
      "/pet" : {
         "put" : {
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "description" : "",
            "consumes" : [
               "application/json",
               "application/xml"
            ],
            "security" : [
               {
                  "petstore_auth" : [
                     "write:pets",
                     "read:pets"
                  ]
               }
            ],
            "tags" : [
               "pet"
            ],
            "responses" : {
               "404" : {
                  "description" : "Pet not found"
               },
               "405" : {
                  "description" : "Validation exception"
               },
               "400" : {
                  "description" : "Invalid ID supplied"
               }
            },
            "parameters" : [
               {
                  "schema" : {
                     "$ref" : "#/definitions/Pet"
                  },
                  "required" : true,
                  "name" : "body",
                  "description" : "Pet object that needs to be added to the store",
                  "in" : "body"
               }
            ],
            "summary" : "Update an existing pet",
            "operationId" : "updatePet"
         },
         "post" : {
            "responses" : {
               "405" : {
                  "description" : "Invalid input"
               }
            },
            "parameters" : [
               {
                  "in" : "body",
                  "schema" : {
                     "$ref" : "#/definitions/Pet"
                  },
                  "name" : "body",
                  "required" : true,
                  "description" : "Pet object that needs to be added to the store"
               }
            ],
            "operationId" : "addPet",
            "summary" : "Add a new pet to the store",
            "security" : [
               {
                  "petstore_auth" : [
                     "write:pets",
                     "read:pets"
                  ]
               }
            ],
            "tags" : [
               "pet"
            ],
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "consumes" : [
               "application/json",
               "application/xml"
            ],
            "description" : ""
         }
      },
      "/pet/findByStatus" : {
         "get" : {
            "operationId" : "findPetsByStatus",
            "summary" : "Finds Pets by status",
            "parameters" : [
               {
                  "items" : {
                     "enum" : [
                        "available",
                        "pending",
                        "sold"
                     ],
                     "type" : "string",
                     "default" : "available"
                  },
                  "description" : "Status values that need to be considered for filter",
                  "type" : "array",
                  "required" : true,
                  "collectionFormat" : "csv",
                  "name" : "status",
                  "in" : "query"
               }
            ],
            "responses" : {
               "200" : {
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/Pet"
                     },
                     "type" : "array"
                  },
                  "description" : "successful operation"
               },
               "400" : {
                  "description" : "Invalid status value"
               }
            },
            "tags" : [
               "pet"
            ],
            "security" : [
               {
                  "petstore_auth" : [
                     "write:pets",
                     "read:pets"
                  ]
               }
            ],
            "description" : "Multiple status values can be provided with comma seperated strings",
            "produces" : [
               "application/xml",
               "application/json"
            ]
         }
      },
      "/store/inventory" : {
         "get" : {
            "summary" : "Returns pet inventories by status",
            "operationId" : "getInventory",
            "responses" : {
               "200" : {
                  "description" : "successful operation",
                  "schema" : {
                     "type" : "object",
                     "additionalProperties" : {
                        "format" : "int32",
                        "type" : "integer"
                     }
                  }
               }
            },
            "parameters" : [],
            "description" : "Returns a map of status codes to quantities",
            "produces" : [
               "application/json"
            ],
            "tags" : [
               "store"
            ],
            "security" : [
               {
                  "api_key" : []
               }
            ]
         }
      },
      "/pet/{petId}" : {
         "delete" : {
            "tags" : [
               "pet"
            ],
            "security" : [
               {
                  "petstore_auth" : [
                     "write:pets",
                     "read:pets"
                  ]
               }
            ],
            "description" : "",
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "summary" : "Deletes a pet",
            "operationId" : "deletePet",
            "parameters" : [
               {
                  "type" : "string",
                  "name" : "api_key",
                  "required" : false,
                  "in" : "header"
               },
               {
                  "type" : "integer",
                  "description" : "Pet id to delete",
                  "required" : true,
                  "name" : "petId",
                  "format" : "int64",
                  "in" : "path"
               }
            ],
            "responses" : {
               "400" : {
                  "description" : "Invalid pet value"
               }
            }
         },
         "get" : {
            "security" : [
               {
                  "api_key" : []
               }
            ],
            "tags" : [
               "pet"
            ],
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "description" : "Returns a single pet",
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/Pet"
                  },
                  "description" : "successful operation"
               },
               "404" : {
                  "description" : "Pet not found"
               },
               "400" : {
                  "description" : "Invalid ID supplied"
               }
            },
            "parameters" : [
               {
                  "format" : "int64",
                  "in" : "path",
                  "description" : "ID of pet to return",
                  "type" : "integer",
                  "name" : "petId",
                  "required" : true
               }
            ],
            "summary" : "Find pet by ID",
            "operationId" : "getPetById"
         },
         "post" : {
            "parameters" : [
               {
                  "format" : "int64",
                  "in" : "path",
                  "name" : "petId",
                  "required" : true,
                  "description" : "ID of pet that needs to be updated",
                  "type" : "integer"
               },
               {
                  "in" : "formData",
                  "required" : false,
                  "name" : "name",
                  "description" : "Updated name of the pet",
                  "type" : "string"
               },
               {
                  "required" : false,
                  "name" : "status",
                  "description" : "Updated status of the pet",
                  "type" : "string",
                  "in" : "formData"
               }
            ],
            "responses" : {
               "405" : {
                  "description" : "Invalid input"
               }
            },
            "summary" : "Updates a pet in the store with form data",
            "operationId" : "updatePetWithForm",
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "description" : "",
            "consumes" : [
               "application/x-www-form-urlencoded"
            ],
            "security" : [
               {
                  "petstore_auth" : [
                     "write:pets",
                     "read:pets"
                  ]
               }
            ],
            "tags" : [
               "pet"
            ]
         }
      },
      "/pet/findByTags" : {
         "get" : {
            "tags" : [
               "pet"
            ],
            "security" : [
               {
                  "petstore_auth" : [
                     "write:pets",
                     "read:pets"
                  ]
               }
            ],
            "description" : "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "operationId" : "findPetsByTags",
            "summary" : "Finds Pets by tags",
            "responses" : {
               "200" : {
                  "schema" : {
                     "type" : "array",
                     "items" : {
                        "$ref" : "#/definitions/Pet"
                     }
                  },
                  "description" : "successful operation"
               },
               "400" : {
                  "description" : "Invalid tag value"
               }
            },
            "parameters" : [
               {
                  "name" : "tags",
                  "collectionFormat" : "csv",
                  "required" : true,
                  "description" : "Tags to filter by",
                  "type" : "array",
                  "items" : {
                     "type" : "string"
                  },
                  "in" : "query"
               }
            ]
         }
      },
      "/user/login" : {
         "get" : {
            "summary" : "Logs user into the system",
            "operationId" : "loginUser",
            "tags" : [
               "user"
            ],
            "responses" : {
               "200" : {
                  "description" : "successful operation",
                  "schema" : {
                     "type" : "string"
                  },
                  "headers" : {
                     "X-Expires-After" : {
                        "description" : "date in UTC when toekn expires",
                        "type" : "string",
                        "format" : "date-time"
                     },
                     "X-Rate-Limit" : {
                        "description" : "calls per hour allowed by the user",
                        "type" : "integer",
                        "format" : "int32"
                     }
                  }
               },
               "400" : {
                  "description" : "Invalid username/password supplied"
               }
            },
            "parameters" : [
               {
                  "in" : "query",
                  "required" : true,
                  "name" : "username",
                  "type" : "string",
                  "description" : "The user name for login"
               },
               {
                  "type" : "string",
                  "description" : "The password for login in clear text",
                  "required" : true,
                  "name" : "password",
                  "in" : "query"
               }
            ],
            "description" : "",
            "produces" : [
               "application/xml",
               "application/json"
            ]
         }
      },
      "/user/createWithList" : {
         "post" : {
            "responses" : {
               "default" : {
                  "description" : "successful operation"
               }
            },
            "parameters" : [
               {
                  "in" : "body",
                  "schema" : {
                     "items" : {
                        "$ref" : "#/definitions/User"
                     },
                     "type" : "array"
                  },
                  "name" : "body",
                  "required" : true,
                  "description" : "List of user object"
               }
            ],
            "operationId" : "createUsersWithListInput",
            "summary" : "Creates list of users with given input array",
            "tags" : [
               "user"
            ],
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "description" : ""
         }
      },
      "/store/order" : {
         "post" : {
            "description" : "",
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "summary" : "Place an order for a pet",
            "operationId" : "placeOrder",
            "tags" : [
               "store"
            ],
            "responses" : {
               "200" : {
                  "schema" : {
                     "$ref" : "#/definitions/Order"
                  },
                  "description" : "successful operation"
               },
               "400" : {
                  "description" : "Invalid Order"
               }
            },
            "parameters" : [
               {
                  "in" : "body",
                  "schema" : {
                     "$ref" : "#/definitions/Order"
                  },
                  "required" : true,
                  "name" : "body",
                  "description" : "order placed for purchasing the pet"
               }
            ]
         }
      },
      "/store/order/{orderId}" : {
         "delete" : {
            "description" : "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "operationId" : "deleteOrder",
            "tags" : [
               "store"
            ],
            "summary" : "Delete purchase order by ID",
            "parameters" : [
               {
                  "description" : "ID of the order that needs to be deleted",
                  "type" : "string",
                  "name" : "orderId",
                  "required" : true,
                  "in" : "path",
                  "minimum" : 1
               }
            ],
            "responses" : {
               "404" : {
                  "description" : "Order not found"
               },
               "400" : {
                  "description" : "Invalid ID supplied"
               }
            }
         },
         "get" : {
            "description" : "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
            "produces" : [
               "application/xml",
               "application/json"
            ],
            "operationId" : "getOrderById",
            "summary" : "Find purchase order by ID",
            "tags" : [
               "store"
            ],
            "responses" : {
               "400" : {
                  "description" : "Invalid ID supplied"
               },
               "200" : {
                  "description" : "successful operation",
                  "schema" : {
                     "$ref" : "#/definitions/Order"
                  }
               },
               "404" : {
                  "description" : "Order not found"
               }
            },
            "parameters" : [
               {
                  "type" : "integer",
                  "description" : "ID of pet that needs to be fetched",
                  "required" : true,
                  "name" : "orderId",
                  "in" : "path",
                  "minimum" : 1,
                  "format" : "int64",
                  "maximum" : 5
               }
            ]
         }
      }
   },
   "info" : {
      "contact" : {
         "email" : "apiteam@swagger.io"
      },
      "version" : "1.0.0",
      "description" : "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
      "title" : "Swagger Petstore",
      "license" : {
         "name" : "Apache 2.0",
         "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "termsOfService" : "http://swagger.io/terms/"
   },
   "tags" : [
      {
         "externalDocs" : {
            "description" : "Find out more",
            "url" : "http://swagger.io"
         },
         "name" : "pet",
         "description" : "Everything about your Pets"
      },
      {
         "description" : "Access to Petstore orders",
         "name" : "store"
      },
      {
         "description" : "Operations about user",
         "externalDocs" : {
            "url" : "http://swagger.io",
            "description" : "Find out more about our store"
         },
         "name" : "user"
      }
   ]
}
